<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Starting Over as a Web Developer]]></title>
  <link href="http://elowing.github.io/atom.xml" rel="self"/>
  <link href="http://elowing.github.io/"/>
  <updated>2014-07-08T06:48:44-04:00</updated>
  <id>http://elowing.github.io/</id>
  <author>
    <name><![CDATA[Emily Lowing]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Traversing Binary Search Trees]]></title>
    <link href="http://elowing.github.io/blog/2014/07/07/binary-search-trees/"/>
    <updated>2014-07-07T19:26:43-04:00</updated>
    <id>http://elowing.github.io/blog/2014/07/07/binary-search-trees</id>
    <content type="html"><![CDATA[<p>Traversing a binary search tree can take as little as five lines of code, if you: a) know what you&rsquo;re doing; b) know a bit about recursion; and c) know a bit more about block parameters:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">each</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'> <span class="n">left</span><span class="o">.</span><span class="n">each</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span> <span class="k">if</span> <span class="n">left</span>
</span><span class='line'> <span class="n">block</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'> <span class="n">right</span><span class="o">.</span><span class="n">each</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span> <span class="k">if</span> <span class="n">right</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li> An object (in this case, the parameter &lsquo;block&rsquo;) is passed into our method signature, prefixed with an ampersand.</li>
<li> Ruby calls <code>to_proc</code> on &lsquo;block&rsquo; (if it is not already a <code>Proc</code> object), since it saw the ampersand there.</li>
<li> We use recursion to iterate as follows:

<ol>
<li><code>each</code> is called recursively on a node&rsquo;s left child, until the leftmost child is reached.</li>
<li>When there is no further left child, that direct parent node is then yielded.</li>
<li><code>each</code> is then called recursively again, this time on that direct parent node&rsquo;s right children, if they exist.</li>
</ol>
</li>
</ol>


<p>In this way, an <em>ordered</em> list of all nodes within a binary search tree are properly yielded. There you go, that&rsquo;s it! You&rsquo;re all set. Well okay, let&rsquo;s back up a minute and inspect that <code>&amp;</code> symbol, the <em>ampersand</em>.</p>

<h2>The Power of <code>&amp;</code></h2>

<p><strong>We can use the ampersand in front of objects passed in to method calls or definitions (as arguments or parameters) in order to coax Ruby into treating the objects as blocks instead of objects.</strong></p>

<p>Almost everything in Ruby is an object. Blocks are one of the few exceptions. In the context of the above code snippet, we see the ampersand prefixed to the object in the parameter of the method signature. This tells Ruby to expect a block, which it will try to conform to by calling <code>to_proc</code> on the parameter. Although blocks are not objects, <code>Proc</code>s are, and function in many similar ways.</p>

<p>The ampersand also allows us to refer to our parameter by name within the method definition, as is necessary when recursing. This is especially powerful in our example above, as it allows us to use recursion in tandem with a block argument to recreate the <code>each</code> function within our <code>Binary Search Tree</code> class, yielding the data within each instance of the class as we iterate over all nodes in the tree.</p>

<h2>Ways Around Using Blocks</h2>

<p>By contrast, take a look below at the same function without block parameters or recursion:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">each</span>
</span><span class='line'>    <span class="n">node</span> <span class="o">=</span> <span class="nb">self</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">count</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="n">left</span> <span class="k">while</span> <span class="n">node</span><span class="o">.</span><span class="n">left</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">node</span><span class="o">.</span><span class="n">left</span><span class="o">.</span><span class="n">yielded</span>
</span><span class='line'>      <span class="k">unless</span> <span class="n">node</span><span class="o">.</span><span class="n">yielded</span>
</span><span class='line'>        <span class="k">yield</span> <span class="n">node</span><span class="o">.</span><span class="n">data</span>
</span><span class='line'>        <span class="n">node</span><span class="o">.</span><span class="n">yielded</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">node</span><span class="o">.</span><span class="n">right</span>
</span><span class='line'>        <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="n">right</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="n">parent</span> <span class="k">while</span> <span class="n">node</span><span class="o">.</span><span class="n">parent</span> <span class="o">&amp;&amp;</span> <span class="n">node</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">yielded</span>
</span><span class='line'>        <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="n">parent</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Confusing, huh? Sure, it&rsquo;s <em>possible</em> to write a traversal method that doesn&rsquo;t use blocks or recursion, but why would you want to? Without recursion, we are forced to:</p>

<ul>
<li>keep track of how many instances of the class we have (hence the <code>self.count</code>), in order to make sure we loop through enough times to hit every node in the tree.</li>
<li>use conditional loops to ensure we return an ordered list, by drilling down to the leftmost subnode of whatever parent node we&rsquo;re currently on in our larger traversal.</li>
<li>keep track of whether our current node has previously been yielded, as we already may have passed it on our way down into a right sub-tree.</li>
</ul>


<h2>Wrapup and Resources</h2>

<p>Blocks and recursion together provide a relevant and efficient means of recreating the <code>each</code> function for binary search trees, allowing us to traverse trees in a concise and neat manner.</p>

<ul>
<li><a href="http://deatheragetr.github.io/blog/2013/09/14/binary-search-trees/">http://deatheragetr.github.io/blog/2013/09/14/binary-search-trees/</a></li>
<li><a href="http://www.skorks.com/2013/04/ruby-ampersand-parameter-demystified/">http://www.skorks.com/2013/04/ruby-ampersand-parameter-demystified/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Double Pipes Equals What?]]></title>
    <link href="http://elowing.github.io/blog/2014/06/19/shortcuts-and-pitfalls-of-memoization/"/>
    <updated>2014-06-19T23:56:26-04:00</updated>
    <id>http://elowing.github.io/blog/2014/06/19/shortcuts-and-pitfalls-of-memoization</id>
    <content type="html"><![CDATA[<blockquote><p>Memoization is the process of storing a computed value to avoid duplicated work by future calls.
&ndash; <a href="http://gavinmiller.io/2013/basics-of-ruby-memoization/">Gavin Miller</a></p></blockquote>

<p>As novice Ruby programmers, it has not been a big deal for us so far to set variables equal to a given value, and re-evaluate the code setting that variable each time we need to call the method. However, our introduction to web scraping last week got me thinking about the potential benefits of memoization, and where else it might be useful as our skills and knowledge base expand.</p>

<p>But let&rsquo;s back up a minute first. What exactly <em>is</em> memoization, anyway? You actually probably already know and use it, even if you can&rsquo;t remember what it&rsquo;s called. It has to do with those funny <code>||=</code> symbols we&rsquo;ve seen around, and with a process you are also likely familiar with from your web browser&hellip;</p>

<h2>Caching</h2>

<p><a href="https://www.mnot.net/cache_docs/">Web caches</a> sit between users and websites, watching requests come by and saving copies of the responses, so that when another request for the same website comes in, the cache can use the stored response it already has, instead of querying the origin server for it again. On the web, this improves response time for users, as well as reducing overall network traffic. <strong>In other words, we can cache (or <em>memoize</em>) in order to save time and memory when accessing the same websites (or variables, in programming).</strong> Memoization in Ruby functions the same way, and it carries out these evaluations using the <code>||=</code> operator. Let&rsquo;s take a look.</p>

<h2>Memoizing in Ruby</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">||=</span> <span class="n">b</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, a common misconception about the <code>||=</code> is that it evaluates to <code>a = a || b</code>. Which would mean that we evaluate the statement <code>a = a</code> each time we run the code, and if the variable were not already defined, then returning <code>b</code> instead. I mean, the <code>+=</code> and <code>-=</code> operators work the same way, don&rsquo;t they?</p>

<p>Wrong! Well, yes, <code>a += b</code> does in fact evaluate to <code>a = a + b</code>. But in fact, memoization is implemented in an entirely different way from these math operators. We would do best not to think about them in the same terms at all. We can see a true memoized implementation demonstrated in the example <a href="http://dablog.rubypal.com/2008/3/25/a-short-circuit-edge-case">below</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;&gt;</span> <span class="n">h</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="n">h</span><span class="o">[</span><span class="ss">:x</span><span class="o">]</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">1</span>        <span class="c1"># default value returned, but...</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="n">h</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="p">{}</span>       <span class="c1"># reference alone doesn&#39;t set key.</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="n">h</span><span class="o">[</span><span class="ss">:x</span><span class="o">]</span> <span class="o">||=</span> <span class="mi">2</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">1</span>        <span class="c1"># again, default value returned...</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="n">h</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="p">{}</span>       <span class="c1"># but hash still empty!</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="n">h</span><span class="o">[</span><span class="ss">:x</span><span class="o">]</span> <span class="o">=</span> <span class="n">h</span><span class="o">[</span><span class="ss">:x</span><span class="o">]</span> <span class="o">||</span> <span class="mi">2</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">1</span>        <span class="c1"># only when changing memoize&#39;s implicit implementation,</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="n">h</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:x</span><span class="o">=&gt;</span><span class="mi">1</span><span class="p">}</span>  <span class="c1"># can we set the key, changing what is returned.</span>
</span></code></pre></td></tr></table></div></figure>


<h2>When to Use</h2>

<p>Now, I sorta set you up in the above example. Hashes with default values are a bit of an edge case in memoization, in that most often, when we use memoization with hashes, we usually want to set a key equal to a value if the key does not already exist. But as you can see above, this was not the case until we expanded out the operation to include setting the key to itself <em>before</em> the double pipes. As an aside, the shorter memoize formula <em>does</em> work with hashes NOT initialized with a default value.</p>

<p>Welp! that about wraps it up. I&rsquo;ll leave off with a few general guidelines about when to use or avoid memoization, courtesy again of <a href="http://gavinmiller.io/2013/basics-of-ruby-memoization/">Gavin Miller</a>.</p>

<h4>Bad Ideas</h4>

<ul>
<li>Methods that use instance variables.</li>
<li><a href="http://cmme.org/tdumitrescu/blog/2014/01/careful-what-you-memoize/">Class variables in your testing suite</a>. I haven&rsquo;t tried this one out myself, but apparently, your test database is wiped out before each subsequent example begins, <strong>except for</strong> class variables, which will then return the old memoized result on your fresh new test.</li>
</ul>


<h4>Good Ideas</h4>

<ul>
<li>Expensive calculations.</li>
<li>Repeated calculations that don&rsquo;t change.</li>
<li>Duplicated SQL database calls. (IF NOT EXISTS, anyone?)</li>
</ul>


<h4>Tricksy Edge Cases</h4>

<ul>
<li>Hashes with a default value. (See above, duh!)</li>
<li>Undefined variables. This is just Ruby being sneaky behind the curtain. Any time you see a variable assignment, <em>even if that code is never run</em> (such as within a false conditional statement), Ruby summons that variable into being, not raising a name error if you try to &lsquo;puts&rsquo; it. So Ruby evaluates <code>a ||= b</code> at the parsing stage <em>differently</em> than it would see <code>a || a = b</code>, even though they evaluate the same way when the code is actually run. I am not sure why that changes between parsing and implementation, but Peter Cooper has a nice little clip about it at the bottom of <a href="http://www.rubyinside.com/what-rubys-double-pipe-or-equals-really-does-5488.html">this post</a>.</li>
</ul>


<h2>Resources</h2>

<ul>
<li><a href="http://gavinmiller.io/2013/basics-of-ruby-memoization/">http://gavinmiller.io/2013/basics-of-ruby-memoization/</a></li>
<li><a href="https://www.mnot.net/cache_docs/">https://www.mnot.net/cache_docs/</a></li>
<li><a href="http://dablog.rubypal.com/2008/3/25/a-short-circuit-edge-case">http://dablog.rubypal.com/2008/3/25/a-short-circuit-edge-case</a></li>
<li><a href="http://www.rubyinside.com/what-rubys-double-pipe-or-equals-really-does-5488.html">http://www.rubyinside.com/what-rubys-double-pipe-or-equals-really-does-5488.html</a></li>
<li><a href="http://gavinmiller.io/2013/basics-of-ruby-memoization/">http://gavinmiller.io/2013/basics-of-ruby-memoization/</a></li>
<li><a href="http://cmme.org/tdumitrescu/blog/2014/01/careful-what-you-memoize/">http://cmme.org/tdumitrescu/blog/2014/01/careful-what-you-memoize/</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
